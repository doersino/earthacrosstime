# Hello! This is the configuration for earthacrosstime. It's written in
# ConfigObj's "unrepr" dialect, which basically means that the values of the
# key-value pairs observe the usual Python semantics.


[GENERAL]

# This option steers how talkative this bot is on the command line. If set to
# "quiet", only errors are output. If set to "normal", status messages are
# printed as well. If set to "verbose", all kinds of debugging information is
# printed, too. Should you be planning to run the bot as a cronjob or similar, I
# recommend the "quiet" setting, while "verbose" is well-suited for testing.
verbosity = "normal"

# If not set to None, whatever would be printed in the "verbose" output mode
# will be written to this file as well. This log is not autorotated – so it'll
# grow to fill your hard drive on an infinite time scale.
logfile = "earthacrosstime.log"

# Temporary storage location for both raw (since the video editing library
# utilized by this bot needs a file to operate on) and processed (since that
# same library can't just write to memory) videos.
# Note 1: Will be created if it doesn't already exist.
# Note 1: This bot doesn't delete old videos, so given enough time, the storage
# directory will grow to fill your hard drive. You can empty it out manually
# whenever the bot isn't actively running.
temp_dir = "temp/"


[TIMEMACHINE]

# The URL of the "repository" containing the CMU Time Machine (the technology
# Google Earth Timelapse is based on, see
# https://github.com/CMU-CREATE-Lab/timemachine-creator and
# https://github.com/CMU-CREATE-Lab/timemachine-viewer) data, i.e. the
# directory that directly contains "tm.json". Note that this bot has only been
# tested with this default URL, but it should work for other repositories, too.
timemachine_repository_url = "https://storage.googleapis.com/earthengine-timelapse/2020/20201212/"

# Data source attribution shown in the bottom right (might be required depending
# on licensing constraints) of the result videos. For the default Time Machine
# repository, attribution must take the following shape (see
# https://developers.google.com/earth-engine/timelapse/about):
attribution = "Source: Google Earth Timelapse (Google, Landsat, Copernicus)"

# Resize videos to these dimensions before processing. This can be handy since
# the default Time Machine repository contains videos sized 1424x800 pixels,
# which is pretty non-standard.
# Note 1: Make sure the aspect ratios match. Also, some video players can't seem
# to deal with videos where at least one dimension is an odd number, so make
# sure both dimensions are even.
# Note 2: Set to None to disable resizing.
# Note 3: resize = (1280, 720) works well for Twitter.
resize = (1280, 720)


[GEOGRAPHY]

# Path to the shapefile used for random location selection in a region, country
# or continent.
# Note 1: Being based on ærialbot (see https://github.com/doersino/aerialbot),
# this bot isn't very sophisticated – it's only built to deal with shapefiles
# that abide by the following rules (for a guide on making any shapefile work,
# see https://github.com/doersino/aerialbot/blob/master/shapefiles/README.md):
# 1. The shapefile contains a single layer
# 2. with a single record
# 3. of type POLYGON
# 4. whose points are notated as longitude-latitude pairs (CRS: +proj=longlat).
# Note 2: This bot is quite sophisticated – the distribution of random points
# takes into account that at high latitudes, neighboring meridians are closer
# together than at the equator. (If a uniform distribution on latitudes and
# longitudes was used instead, random points would be biased towards the poles.)
shapefile = "assets/world-shapefile/world.shp"

# Alternatively, you can – for testing purposes, for example – set a geopoint,
# i.e. a latitude-longitude pair. If this point is not None, it will be used
# instead of a random point from the shapefile, which will then not even be
# loaded.
# Note: point = (37.453896, 126.446829) is quite handy for testing.
point = None

# This setting, which sets the maximally allowable meters contained in a single
# pixel of the result video, determines the required tile zoom level, setting it
# as coarse as possible while still fulfilling this constraint (unless you set a
# value lower than what's provided in your Time Machine repository, in which
# case the highest available resolution is used).
# Note 1: Basically, smaller values here lead to crisper detail.
# Note 2: Timelapse videos are not available in much detail – 10 meters per
# pixel is about as close as you can get in most places.
# Note 3: You can also set this to a tuple of integers – in that case, a random
# integer between those inclusive bounds is selected.
max_meters_per_pixel = (8, 32)

# The URL of a Nominatim instance (see https://nominatim.openstreetmap.org) that
# will be used for reverse geocoding, i.e. displaying a place name below the
# coordinates on the end cards of the generated videos. Attribution will be
# given, based on the "licence" fields of the JSON responses, at the bottom of
# the end cards.
nominatim_url = "https://nominatim.openstreetmap.org/"

[TWITTER]

# Twitter handle (without leading @, shown at the bottom of the end cards of the
# generated videos).
twitter_handle = "earthacrosstime"

# Information required for posting to Twitter using its OAuth 1a authentication
# method. Check out the following website for an explanation of how to generate
# these keys/tokens/secrets for your Twitter account:
# https://iag.me/socialmedia/how-to-create-a-twitter-app-in-8-easy-steps/
# Note: If any of these four values is set to None, Twitter posting will be
# disabled, but the result images will still be generated as configured.
consumer_key = None
consumer_secret = None
access_token = None
access_token_secret = None

# The text of each tweet. You can use the following variables in your string:
# | variable             | example value                                                              |
# | -------------------- | ---------------------------------------------------------------------------|
# | {latitude}           | 38.93490955793527                                                          |
# | {longitude}          | -87.71460377200692                                                         |
# | {point_fancy}        | 35°12'57.1"N 118°58'35.6"W                                                 |
# | {area_size}          | 34.74 × 19.52 km                                                           |
# | {osm_url}            | https://www.openstreetmap.org/#map=18/40.84034204865187/-73.93902731230716 |
# | {googlemaps_url}     | https://www.google.com/maps/@40.84034204865187,-73.93902731230716,18z      |
# | {location}           | Central Kalimantan, Indonesia                                              |
# | {year_range}         | 1984-2018                                                                  |
# Note: The location data is retrieved via the Nominatim API. If it doesn't know
# a place (e.g. if the point is located in the ocean or in large parts of the
# Arctic), the last variable may be an empty string.
tweet_text = "{point_fancy}\n{area_size}\n{year_range}"

# Whether to include the latitude and longitude of the randomly selected point
# in the Tweet metadata. Twitter users will see which country, state or town
# it's in depending on what Twitter's backend location database provides for the
# given location. Note that in order for this metadata to be displayed, you must
# enable "Add location information to my Tweets" in the "Location information"
# tab of your "Privacy and safety" settings on twitter.com.
include_location_in_metadata = True


[MASTODON]

# Mastodon handle (with leading @, shown at the bottom of the end cards of the
# generated videos).
mastodon_handle = "@aerialbot@botsin.space"

# Information required for posting to Mastodon. Go to your bot account's
# settings, "Development", "New Application", decide on an application name and
# select the "write:media" and "write:statuses" scopes (and unselect everything
# else just in case), click "Submit", then click on the newly created
# application's name – you'll find the access token there.
# Note: If any of these two values is set to None, Mastodon posting will be
# disabled, but the result images will still be generated as configured.
api_base_url = "https://botsin.space"
access_token = None

# The text of each toot. You can use the following variables in your string:
# | variable             | example value                                                              |
# | -------------------- | ---------------------------------------------------------------------------|
# | {latitude}           | 38.93490955793527                                                          |
# | {longitude}          | -87.71460377200692                                                         |
# | {point_fancy}        | 35°12'57.1"N 118°58'35.6"W                                                 |
# | {area_size}          | 34.74 × 19.52 km                                                           |
# | {osm_url}            | https://www.openstreetmap.org/#map=18/40.84034204865187/-73.93902731230716 |
# | {googlemaps_url}     | https://www.google.com/maps/@40.84034204865187,-73.93902731230716,18z      |
# | {location}           | Central Kalimantan, Indonesia                                              |
# | {year_range}         | 1984-2018                                                                  |
# Note: The location data is retrieved via the Nominatim API. If it doesn't know
# a place (e.g. if the point is located in the ocean or in large parts of the
# Arctic), the last variable may be an empty string.
toot_text = "{point_fancy}\n{area_size}\n{year_range}"
